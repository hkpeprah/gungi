// util_unit_tests.cpp                                                -*-C++-*-
#include "util.hpp"

#include "builder.hpp"
#include "gtypes.hpp"
#include "posn.hpp"
#include "unit.hpp"
#include "util.hpp"

#include <CppUTest/TestHarness.h>

#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <utility>

using namespace gungi;

class TestWalkFixture {
  // Fixture used to test walks.

private:
  // INSTANCE MEMBERS
  const Builder m_builder;
                 // Constant builder.

  Unit          m_unit;
                 // Unit the fixture is for.

  error_t       m_error;
                 // Error message generated by the walk.

public:
  // CREATORS
  TestWalkFixture(piece_id_t front)
  : m_unit(front, GUNGI_PIECE_NONE, BLACK, m_builder)
  {
    // DO NOTHING
  }

  // MANIPULATORS
  void checkWalk(PosnSet expected_walk, tier_t tier = 0) {
    const Posn& start = expected_walk[0];
    const Posn& end = expected_walk.back();

    PosnSet actual_walk = Util::getWalk(&m_unit, tier, start, end, m_error);

    CHECK_EQUAL(GUNGI_ERROR_NONE, m_error);
    CHECK_TRUE(std::equal(expected_walk.begin(), expected_walk.end(), actual_walk.begin()));
  }
};

TEST_GROUP(NilDeleterTest) {
  void setup(void) {
    return;
  }

  void teardown(void) {
    return;
  }
};

TEST(NilDeleterTest, nil_deleter_does_not_delete) {
  int *ptr = new int;

  NilDeleter<int> deleter;
  deleter(ptr);

  delete ptr;
}

TEST_GROUP(UtilTest) {
  void setup(void) {
    return;
  }

  void teardown(void) {
    return;
  }
};

TEST(UtilTest, is_unit_invalid_returns_false_for_invalid_pieces) {
  CHECK_TRUE(Util::isInvalidPiece(GUNGI_PIECE_NONE));
  CHECK_FALSE(Util::isValidPiece(GUNGI_PIECE_NONE));

  CHECK_TRUE(Util::isInvalidPiece(GUNGI_NUM_PIECES));
  CHECK_FALSE(Util::isValidPiece(GUNGI_NUM_PIECES));
}

TEST(UtilTest, is_unit_valid_returns_true_for_valid_pieces) {
  piece_id_t id = static_cast<piece_id_t>(GUNGI_PIECE_NONE + 1);

  while (id != GUNGI_NUM_PIECES) {
    CHECK_TRUE(Util::isValidPiece(id));

    CHECK_FALSE(Util::isInvalidPiece(id));

    id = static_cast<piece_id_t>(id + 1);
  }
}

TEST(UtilTest, is_front_piece_returns_false_on_invalid) {
  CHECK_FALSE(Util::isFrontPiece(GUNGI_PIECE_NONE));

  CHECK_FALSE(Util::isFrontPiece(GUNGI_NUM_PIECES));
}

TEST(UtilTest, is_front_piece_returns_true_for_front_pieces) {
  const piece_id_t front_pieces[] = {
    GUNGI_PIECE_COMMANDER,
    GUNGI_PIECE_CAPTAIN,
    GUNGI_PIECE_SAMURAI,
    GUNGI_PIECE_SPY,
    GUNGI_PIECE_CATAPULT,
    GUNGI_PIECE_FORTRESS,
    GUNGI_PIECE_HIDDEN_DRAGON,
    GUNGI_PIECE_PRODIGY,
    GUNGI_PIECE_BOW,
    GUNGI_PIECE_PAWN
  };

  const size_t len = sizeof(front_pieces) / sizeof(piece_id_t);
  for (size_t i = 0; i < len; i++) {
    CHECK_TRUE(Util::isFrontPiece(front_pieces[i]));

    CHECK_FALSE(Util::isBackPiece(front_pieces[i]));
  }
}

TEST(UtilTest, is_back_piece_returns_false_on_invalid) {
  CHECK_FALSE(Util::isBackPiece(GUNGI_PIECE_NONE));

  CHECK_FALSE(Util::isBackPiece(GUNGI_NUM_PIECES));
}

TEST(UtilTest, is_back_piece_returns_true_for_back_pieces) {
  const piece_id_t back_pieces[] = {
    GUNGI_PIECE_PISTOL,
    GUNGI_PIECE_PIKE,
    GUNGI_PIECE_CLANDESTINITE,
    GUNGI_PIECE_LANCE,
    GUNGI_PIECE_DRAGON_KING,
    GUNGI_PIECE_PHOENIX,
    GUNGI_PIECE_ARROW,
    GUNGI_PIECE_BRONZE,
    GUNGI_PIECE_SILVER,
    GUNGI_PIECE_GOLD
  };

  const size_t len = sizeof(back_pieces) / sizeof(piece_id_t);
  for (size_t i = 0; i < len; i++) {
    CHECK_TRUE(Util::isBackPiece(back_pieces[i]));

    CHECK_FALSE(Util::isFrontPiece(back_pieces[i]));
  }
}

TEST(UtilTest, to_lowercase_lowercases_uppercase_letters) {
  for (unsigned char ch = 'a'; ch <= 'z'; ch++) {
    CHECK_EQUAL(ch, Util::toLowerCase(ch));
  }

  for (unsigned char ch = 'A'; ch <= 'Z'; ch++) {
    CHECK_EQUAL((ch - 'A') + 'a', Util::toLowerCase(ch));
  }
}

TEST(UtilTest, to_lowercase_lowercases_string) {
  std::vector<std::pair<std::string, std::string> > sets = {
    { "Uppercase", "uppercase" },
    { "lowercase", "lowercase" },
    { "PAWN", "pawn" },
    { "PR-br", "pr-br" }
  };

  for (std::pair<std::string, std::string> pair : sets) {
    CHECK_TRUE(Util::toLowerCase(pair.first) == pair.second);
  }
}

TEST(UtilTest, to_uppercase_uppercases_lowercase_letters) {
  for (unsigned char ch = 'A'; ch <= 'Z'; ch++) {
    CHECK_EQUAL(ch, Util::toUpperCase(ch));
  }

  for (unsigned char ch = 'a'; ch <= 'z'; ch++) {
    CHECK_EQUAL((ch - 'a') + 'A', Util::toUpperCase(ch));
  }
}

TEST(UtilTest, to_uppercase_uppercases_string) {
  std::vector<std::pair<std::string, std::string> > sets = {
    { "UPPERCASE", "UPPERCASE" },
    { "lowercase", "LOWERCASE" },
    { "pawn", "PAWN" },
    { "PR-br", "PR-BR" }
  };

  for (std::pair<std::string, std::string> pair : sets) {
    CHECK_TRUE(Util::toUpperCase(pair.first) == pair.second);
  }
}

TEST(UtilTest, find_shared_unit_ptr_vector_returns_iterator) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);
  SharedUnitPtrVector v;
  v.push_back(SharedUnitPtr(new Unit(pawn)));
  v.push_back(SharedUnitPtr(new Unit(pawn)));

  CHECK_TRUE(Util::find(v, &pawn) == v.end());
  CHECK_TRUE(Util::find(v, v[0].get()) == v.begin());
  CHECK_TRUE(Util::find(v, v[1].get()) == (v.begin() + 1));
}

TEST(UtilTest, find_const_shared_unit_ptr_vector_returns_iterator) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);
  SharedUnitPtrVector v;
  v.push_back(SharedUnitPtr(new Unit(pawn)));
  v.push_back(SharedUnitPtr(new Unit(pawn)));

  const SharedUnitPtrVector& v2 = v;
  CHECK_TRUE(Util::find(v2, &pawn) == v2.end());
  CHECK_TRUE(Util::find(v2, v[0].get()) == v2.begin());
  CHECK_TRUE(Util::find(v2, v[1].get()) == (v2.begin() + 1));
}

TEST(UtilTest, find_posn_set_returns_iterator) {
  PosnSet set;
  set.push_back(Posn(0, 1));
  set.push_back(Posn(1, 2));

  Posn a(0, 1);
  Posn b(1, 2);
  Posn c(2, 3);

  CHECK_TRUE(Util::find(set, a) == set.begin());
  CHECK_TRUE(Util::find(set, b) == (set.begin() + 1));
  CHECK_TRUE(Util::find(set, c) == set.end());
}

TEST(UtilTest, any_walk_pawn_end) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);

  Posn p1(0, 8);
  CHECK_FALSE(Util::anyWalk(&pawn, 0, p1));

  Posn p2(0, 0);
  CHECK_FALSE(Util::anyWalk(&pawn, 0, p2, true));
}

TEST(UtilTest, any_walk_spy_end) {
  const Builder builder;
  Unit spy(GUNGI_PIECE_SPY, GUNGI_PIECE_NONE, BLACK, builder);

  Posn p1(0, 7);
  CHECK_FALSE(Util::anyWalk(&spy, 0, p1));

  Posn p2(0, 1);
  CHECK_FALSE(Util::anyWalk(&spy, 0, p2, true));

  Posn p3(0, 8);
  CHECK_FALSE(Util::anyWalk(&spy, 1, p3));

  Posn p4(0, 0);
  CHECK_FALSE(Util::anyWalk(&spy, 1, p4, true));
}

TEST(UtilTest, any_walk_lance_end) {
  const Builder builder;
  Unit lance(GUNGI_PIECE_LANCE, GUNGI_PIECE_NONE, BLACK, builder);

  Posn p1(0, 8);
  CHECK_FALSE(Util::anyWalk(&lance, 0, p1));

  Posn p2(0, 0);
  CHECK_FALSE(Util::anyWalk(&lance, 0, p2, true));
}

TEST(UtilTest, any_walk_walk_exists) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);
  Unit lance(GUNGI_PIECE_LANCE, GUNGI_PIECE_NONE, BLACK, builder);
  Unit spy(GUNGI_PIECE_SPY, GUNGI_PIECE_NONE, BLACK, builder);

  CHECK_TRUE(Util::anyWalk(&pawn, 0, Posn(0, 7)));
  CHECK_TRUE(Util::anyWalk(&pawn, 1, Posn(0, 8)));
  CHECK_TRUE(Util::anyWalk(&pawn, 2, Posn(8, 8)));

  CHECK_TRUE(Util::anyWalk(&lance, 0, Posn(0, 7)));
  CHECK_TRUE(Util::anyWalk(&lance, 1, Posn(0, 8)));

  CHECK_TRUE(Util::anyWalk(&spy, 0, Posn(0, 6)));
  CHECK_TRUE(Util::anyWalk(&spy, 0, Posn(0, 2), true));
  CHECK_TRUE(Util::anyWalk(&spy, 1, Posn(0, 7)));
  CHECK_TRUE(Util::anyWalk(&spy, 2, Posn(0, 7)));
}

TEST(UtilTest, get_walk_returns_control_points_on_successful_walk) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);

  Posn start(4, 5);
  Posn end(4, 6);
  error_t error;
  PosnSet points = Util::getWalk(&pawn, 0, start, end, error);

  CHECK_EQUAL(GUNGI_ERROR_NONE, error);
  CHECK_EQUAL(2, points.size());
  CHECK_TRUE(start == points[0]);
  CHECK_TRUE(end == points[1]);

  end = Posn(4, 4);
  points = Util::getWalk(&pawn, 0, start, end, error, true /* invert */);

  CHECK_EQUAL(GUNGI_ERROR_NONE, error);
  CHECK_EQUAL(2, points.size());
  CHECK_TRUE(start == points[0]);
  CHECK_TRUE(end == points[1]);
}

TEST(UtilTest, get_walk_returns_empty_set_on_unsuccesful_walk) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);

  Posn start(4, 5);
  Posn end(4, 4);
  error_t error;
  PosnSet points = Util::getWalk(&pawn, 0, start, end, error);

  CHECK_EQUAL(GUNGI_ERROR_NO_WALK, error);
  CHECK_EQUAL(0, points.size());
}

TEST(UtilTest, get_walk_returns_empty_set_on_end_position_start) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_PAWN, GUNGI_PIECE_NONE, BLACK, builder);

  Posn start(4, 5);
  Posn end(4, 5);
  error_t error;
  PosnSet points = Util::getWalk(&pawn, 0, start, end, error);

  CHECK_EQUAL(GUNGI_ERROR_NO_WALK, error);
  CHECK_EQUAL(0, points.size());
}

TEST(UtilTest, get_walk_returns_empty_set_on_end_position_start_fortress) {
  const Builder builder;
  Unit pawn(GUNGI_PIECE_FORTRESS, GUNGI_PIECE_NONE, BLACK, builder);

  Posn start(4, 5);
  Posn end(4, 5);
  error_t error;
  PosnSet points = Util::getWalk(&pawn, 0, start, end, error);

  CHECK_EQUAL(GUNGI_ERROR_NO_WALK, error);
  CHECK_EQUAL(0, points.size());
}

TEST(UtilTest, get_walk_pawn_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_PAWN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk);
}

TEST(UtilTest, get_walk_pawn_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_PAWN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_pawn_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_PAWN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_bow_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_BOW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_bow_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_BOW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_bow_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_BOW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_prodigy_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_PRODIGY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7), Posn(1, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3), Posn(1, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3), Posn(1, 2), Posn(0, 1) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7), Posn(7, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3), Posn(7, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3), Posn(7, 2), Posn(8, 1) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_prodigy_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_PRODIGY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_prodigy_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_PRODIGY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_hidden_dragon_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_HIDDEN_DRAGON);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7), Posn(4, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2), Posn(4, 1) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2), Posn(4, 1), Posn(4, 0) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5), Posn(1, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5), Posn(1, 5), Posn(0, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5), Posn(7, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5), Posn(7, 5), Posn(8, 5) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_hidden_dragon_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_HIDDEN_DRAGON);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_hidden_dragon_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_HIDDEN_DRAGON);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_spy_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_SPY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_spy_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_SPY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_spy_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_SPY);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_samurai_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_SAMURAI);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_samurai_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_SAMURAI);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_samurai_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_SAMURAI);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_captain_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_CAPTAIN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_captain_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_CAPTAIN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_captain_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_CAPTAIN);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_commander_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_COMMANDER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_commander_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_COMMANDER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_commander_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_COMMANDER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_bronze_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_BRONZE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_bronze_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_BRONZE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_bronze_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_BRONZE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_silver_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_SILVER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_silver_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_SILVER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_silver_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_SILVER);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_gold_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_GOLD);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_gold_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_GOLD);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_gold_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_GOLD);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_arrow_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_ARROW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_arrow_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_ARROW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_arrow_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_ARROW);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_phoenix_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_PHOENIX);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(2, 7), Posn(1, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3), Posn(1, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3), Posn(1, 2), Posn(0, 1) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(6, 7), Posn(7, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3), Posn(7, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3), Posn(7, 2), Posn(8, 1) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_phoenix_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_PHOENIX);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_phoenix_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_PHOENIX);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_lance_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_LANCE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7), Posn(4, 8) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_lance_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_LANCE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_lance_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_LANCE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_spy_tier_clandestinite) {
  TestWalkFixture test(GUNGI_PIECE_CLANDESTINITE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_clandestinite_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_CLANDESTINITE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_clandestinite_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_CLANDESTINITE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6), Posn(3, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6), Posn(5, 7) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(3, 3) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4), Posn(2, 3) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(5, 3) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4), Posn(6, 3) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_pike_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_PIKE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_pike_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_PIKE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_pike_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_PIKE);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_pistol_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_PISTOL);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_pistol_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_PISTOL);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_pistol_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_PISTOL);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_dragon_king_tier_one) {
  TestWalkFixture test(GUNGI_PIECE_DRAGON_KING);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(4, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 6), Posn(4, 7), Posn(4, 8) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2), Posn(4, 1) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(4, 4), Posn(4, 3), Posn(4, 2), Posn(4, 1), Posn(4, 0) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5), Posn(1, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 5), Posn(2, 5), Posn(1, 5), Posn(0, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5), Posn(7, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 5), Posn(6, 5), Posn(7, 5), Posn(8, 5) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 0);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 0);
}

TEST(UtilTest, get_walk_dragon_king_tier_two) {
  TestWalkFixture test(GUNGI_PIECE_DRAGON_KING);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 1);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 1);
}

TEST(UtilTest, get_walk_dragon_king_tier_three) {
  TestWalkFixture test(GUNGI_PIECE_DRAGON_KING);
  PosnSet expected_walk;

  expected_walk = { Posn(4, 5), Posn(3, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 6) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(3, 4) };
  test.checkWalk(expected_walk, 2);

  expected_walk = { Posn(4, 5), Posn(5, 4) };
  test.checkWalk(expected_walk, 2);
}

TEST(UtilTest, get_walk_hidden_dragon_a6_to_a2_inverted) {
  const Builder builder;
  Unit hd(GUNGI_PIECE_HIDDEN_DRAGON, GUNGI_PIECE_NONE, BLACK, builder);
  const Posn& start = Posn(0, 6);
  const Posn& end = Posn(0, 2);

  error_t error;
  PosnSet walk = Util::getWalk(&hd, 0, start, end, error, true /* inverted */);

  CHECK_EQUAL(GUNGI_ERROR_NONE, error);
}

TEST(UtilTest, crossed_returns_empty_set_for_start_end_equal) {
  Posn start(0, 1);
  Posn end(0, 1);

  PosnSet crossed = Util::crossed(start, end);
  CHECK_EQUAL(0, crossed.size());
}

TEST(UtilTest, crossed_returns_empty_set_for_start_end_next) {
  Posn start(0, 1);
  Posn end(0, 2);

  PosnSet crossed = Util::crossed(start, end);
  CHECK_EQUAL(0, crossed.size());
}

TEST(UtilTest, crossed_returns_points_crossed_diagonal) {
  PosnSet crossed;

  Posn start1(3, 4);
  Posn end1(0, 7);
  crossed = Util::crossed(start1, end1);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(2, 5) == crossed[0]);
  CHECK_TRUE(Posn(1, 6) == crossed[1]);

  Posn start2(0, 7);
  Posn end2(3, 4);
  crossed = Util::crossed(start2, end2);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(1, 6) == crossed[0]);
  CHECK_TRUE(Posn(2, 5) == crossed[1]);

  Posn start3(3, 4);
  Posn end3(6, 7);
  crossed = Util::crossed(start3, end3);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(4, 5) == crossed[0]);
  CHECK_TRUE(Posn(5, 6) == crossed[1]);

  Posn start4(6, 7);
  Posn end4(3, 4);
  crossed = Util::crossed(start4, end4);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(5, 6) == crossed[0]);
  CHECK_TRUE(Posn(4, 5) == crossed[1]);
}

TEST(UtilTest, crossed_returns_points_crossed_vertical) {
  PosnSet crossed;
  Posn start(3, 4);
  Posn end(3, 7);

  crossed = Util::crossed(start, end);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(3, 5) == crossed[0]);
  CHECK_TRUE(Posn(3, 6) == crossed[1]);

  crossed = Util::crossed(end, start);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(3, 6) == crossed[0]);
  CHECK_TRUE(Posn(3, 5) == crossed[1]);
}

TEST(UtilTest, crossed_returns_points_crossed_horizontal) {
  PosnSet crossed;
  Posn start(3, 4);
  Posn end(7, 4);

  crossed = Util::crossed(start, end);
  CHECK_EQUAL(3, crossed.size());
  CHECK_TRUE(Posn(4, 4) == crossed[0]);
  CHECK_TRUE(Posn(5, 4) == crossed[1]);
  CHECK_TRUE(Posn(6, 4) == crossed[2]);

  crossed = Util::crossed(end, start);
  CHECK_EQUAL(3, crossed.size());
  CHECK_TRUE(Posn(6, 4) == crossed[0]);
  CHECK_TRUE(Posn(5, 4) == crossed[1]);
  CHECK_TRUE(Posn(4, 4) == crossed[2]);
}

TEST(UtilTest, crossed_returns_points_indirect) {
  PosnSet crossed;

  Posn start1(3, 4);
  Posn end1(2, 6);
  crossed = Util::crossed(start1, end1);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(3, 5) == crossed[0]);
  CHECK_TRUE(Posn(2, 5) == crossed[1]);

  Posn start2(3, 4);
  Posn end2(4, 6);
  crossed = Util::crossed(start2, end2);
  CHECK_EQUAL(2, crossed.size());
  CHECK_TRUE(Posn(3, 5) == crossed[0]);
  CHECK_TRUE(Posn(4, 5) == crossed[1]);
}
